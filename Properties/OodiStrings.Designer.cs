//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OOBEOfflineDriverInstaller.Properties {
    using System;
    
    
    /// <summary>
    ///   Uma classe de recurso de tipo de alta segurança, para pesquisar cadeias de caracteres localizadas etc.
    /// </summary>
    // Essa classe foi gerada automaticamente pela classe StronglyTypedResourceBuilder
    // através de uma ferramenta como ResGen ou Visual Studio.
    // Para adicionar ou remover um associado, edite o arquivo .ResX e execute ResGen novamente
    // com a opção /str, ou recrie o projeto do VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class OodiStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OodiStrings() {
        }
        
        /// <summary>
        ///   Retorna a instância de ResourceManager armazenada em cache usada por essa classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OOBEOfflineDriverInstaller.Properties.OodiStrings", typeof(OodiStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Substitui a propriedade CurrentUICulture do thread atual para todas as
        ///   pesquisas de recursos que usam essa classe de recurso de tipo de alta segurança.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a .
        /// </summary>
        internal static string aaaPROJECTaaa {
            get {
                return ResourceManager.GetString("aaaPROJECTaaa", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Add drivers.
        /// </summary>
        internal static string ADD_DRIVERS {
            get {
                return ResourceManager.GetString("ADD_DRIVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Just adding drivers.
        /// </summary>
        internal static string ADDING {
            get {
                return ResourceManager.GetString("ADDING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Adding and installing drivers.
        /// </summary>
        internal static string ADDING_INSTALLING {
            get {
                return ResourceManager.GetString("ADDING_INSTALLING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Change resolution.
        /// </summary>
        internal static string CHANGE_RESOLUTION {
            get {
                return ResourceManager.GetString("CHANGE_RESOLUTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Changing resolution.
        /// </summary>
        internal static string CHANGING_RESOLUTION {
            get {
                return ResourceManager.GetString("CHANGING_RESOLUTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Resolution changed successfully.
        /// </summary>
        internal static string CHANGING_RESOLUTION_SUCCESSFUL {
            get {
                return ResourceManager.GetString("CHANGING_RESOLUTION_SUCCESSFUL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a No need to change resolution.
        /// </summary>
        internal static string CHANGING_RESOLUTION_UNNECESSARY {
            get {
                return ResourceManager.GetString("CHANGING_RESOLUTION_UNNECESSARY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Checking available resolutions.
        /// </summary>
        internal static string CHECKING_AVAILABLE_RESOLUTIONS {
            get {
                return ResourceManager.GetString("CHECKING_AVAILABLE_RESOLUTIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Checking current resolution.
        /// </summary>
        internal static string CHECKING_RESOLUTION {
            get {
                return ResourceManager.GetString("CHECKING_RESOLUTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Driver repository not found.
        /// </summary>
        internal static string DIRECTORY_DO_NOT_EXIST {
            get {
                return ResourceManager.GetString("DIRECTORY_DO_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Driver installation failed.
        /// </summary>
        internal static string DRIVER_INSTALL_FAILED {
            get {
                return ResourceManager.GetString("DRIVER_INSTALL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Driver path.
        /// </summary>
        internal static string DRIVER_PATH {
            get {
                return ResourceManager.GetString("DRIVER_PATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Deleting unused drivers.
        /// </summary>
        internal static string ERASING_GARBAGE {
            get {
                return ResourceManager.GetString("ERASING_GARBAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Unused drivers deleted successfully.
        /// </summary>
        internal static string ERASING_SUCCESSFUL {
            get {
                return ResourceManager.GetString("ERASING_SUCCESSFUL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Failed to change resolution.
        /// </summary>
        internal static string FAILED_CHANGING_RESOLUTION {
            get {
                return ResourceManager.GetString("FAILED_CHANGING_RESOLUTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Firmware type.
        /// </summary>
        internal static string FIRMWARE_TYPE {
            get {
                return ResourceManager.GetString("FIRMWARE_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Hardware model.
        /// </summary>
        internal static string HW_MODEL {
            get {
                return ResourceManager.GetString("HW_MODEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Install drivers.
        /// </summary>
        internal static string INSTALL_DRIVERS {
            get {
                return ResourceManager.GetString("INSTALL_DRIVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Finished installation.
        /// </summary>
        internal static string INSTALL_FINISHED {
            get {
                return ResourceManager.GetString("INSTALL_FINISHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Log file location.
        /// </summary>
        internal static string LOG_LOCATION {
            get {
                return ResourceManager.GetString("LOG_LOCATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Ignoring resolution change.
        /// </summary>
        internal static string NOT_CHANGING_RESOLUTION {
            get {
                return ResourceManager.GetString("NOT_CHANGING_RESOLUTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Bypassing deletion of unused drivers.
        /// </summary>
        internal static string NOT_ERASING_GARBAGE {
            get {
                return ResourceManager.GetString("NOT_ERASING_GARBAGE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Bypassing adding and installing drivers.
        /// </summary>
        internal static string NOT_INSTALLING_DRIVERS {
            get {
                return ResourceManager.GetString("NOT_INSTALLING_DRIVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Skipping reboot.
        /// </summary>
        internal static string NOT_REBOOTING {
            get {
                return ResourceManager.GetString("NOT_REBOOTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a System architecture.
        /// </summary>
        internal static string OS_ARCH {
            get {
                return ResourceManager.GetString("OS_ARCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a System version.
        /// </summary>
        internal static string OS_VERSION {
            get {
                return ResourceManager.GetString("OS_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Pause after finish.
        /// </summary>
        internal static string PAUSE_AFTER_FINISH {
            get {
                return ResourceManager.GetString("PAUSE_AFTER_FINISH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Reboot after finish.
        /// </summary>
        internal static string REBOOT_AFTER_FINISH {
            get {
                return ResourceManager.GetString("REBOOT_AFTER_FINISH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Reboot required to change resolution.
        /// </summary>
        internal static string REBOOT_CHANGING_RESOLUTION {
            get {
                return ResourceManager.GetString("REBOOT_CHANGING_RESOLUTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Vertical resolution.
        /// </summary>
        internal static string RESOLUTION_HEIGHT {
            get {
                return ResourceManager.GetString("RESOLUTION_HEIGHT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Horizontal resolution.
        /// </summary>
        internal static string RESOLUTION_WIDTH {
            get {
                return ResourceManager.GetString("RESOLUTION_WIDTH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Consulta uma cadeia de caracteres localizada semelhante a Unsupported system.
        /// </summary>
        internal static string UNSUPPORTED_OS {
            get {
                return ResourceManager.GetString("UNSUPPORTED_OS", resourceCulture);
            }
        }
    }
}
